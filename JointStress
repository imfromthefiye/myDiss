% TRIAXIAL TEST

%make a box model, which will be put on a slope
clear;
fs.randSeed(1);%build random model
B=obj_Box;%build a box object
B.name='3DJointStress';
B.GPUstatus='auto';
B.ballR=0.005;
B.isClump=0;
B.distriRate=0.2;
B.sampleW=0.1;
B.sampleL=0.1;
B.sampleH=0.15;
B.BexpandRate=B.sampleW*0.1/B.ballR;
B.PexpandRate=B.sampleW*0.1/B.ballR;
B.setType('TriaxialCompression');
B.buildInitialModel();%B.show();
B.setUIoutput();

d=B.d;
%--------------end initial model------------
B.gravitySediment();
%B.compactSample(2);%input is compaction time
%mfs.reduceGravity(d,10);%reduce the gravity of element

%------------return and save result--------------
d.status.dispEnergy();%display the energy of the model
%d.showFilter('Group',{'sample'});
d.show('mGZ');

d.mo.setGPU('off');
d.clearData(1);%clear dependent data
d.recordCalHour('Step1Finish');
save(['TempModel/' B.name '1.mat'],'B','d');
save(['TempModel/' B.name '1R' num2str(B.ballR) '-distri' num2str(B.distriRate)  'aNum' num2str(d.aNum) '.mat']);
d.calculateData();%because data is clear, it will be re-calculated

--------------------------------------------------------------------------------------------------------------------------
%set the material of the model
clear
load('TempModel/3DJointStress1.mat');
%------------initialize model-------------------
B.setUIoutput();
d=B.d;
d.calculateData();
d.mo.setGPU('off');
d.getModel();%get xyz from d.mo
%------------end initialize model-------------------

%-------------set new material----------------
matTxt=load('Mats\StrongRock.txt');
Mats{1,1}=material('StrongRock',matTxt,B.ballR);
Mats{1,1}.Id=1;
d.Mats=Mats;
d.groupMat2Model({'sample'},1);
%-------------end set new material----------------

%-------------------apply stress, and balance model------------------
B.SET.stressXX=-6e6;
B.SET.stressYY=-6e6;
B.SET.stressZZ=-22e6;
B.setPlatenFixId();
d.resetStatus();
B.setPlatenStress(B.SET.stressXX,B.SET.stressYY,B.SET.stressZZ,B.ballR*5);

d.balanceBondedModel0(4);
d.mo.dT=d.mo.dT*4;%increase the dT to increase the speed of balance
aMUp=d.mo.aMUp;d.mo.aMUp(:)=0;%remove friction
d.balance('Standard',5);
d.mo.aMUp=aMUp;%restore friction
d.mo.dT=d.mo.dT/4;
%-------------------end apply stress, and balance model------------------

%--------------------save data-----------------------
d.mo.setGPU('off');
d.clearData(1);
d.recordCalHour('Step3Finish');
save(['TempModel/' B.name '2.mat'],'B','d');
save(['TempModel/' B.name '2R' num2str(B.ballR) '-distri' num2str(B.distriRate)  'aNum' num2str(d.aNum) '.mat']);
%--------------------end save data-----------------------

d.calculateData();
d.show('ZDisplacement');
--------------------------------------------------------------------------------------------------------------------------
%-------------------user_triaxialTest.m---------------
clear;

% 1) Load a previously prepared model
load('TempModel/3DJointStress2.mat');

% 2) Basic UI output setup
B.setUIoutput();

%-------------------- Initialize model ------------------
d = B.d;
d.calculateData();             % Refresh neighbor searching, etc.
d.mo.setGPU('off');            % Disable GPU (you can turn it on if you like)
d.mo.bFilter(:) = true;        % Keep all bonds as is (or set if needed)
d.deleteConnection('boundary');% Remove boundary bond connections
d.mo.zeroBalance();            % Zero out existing forces
d.getModel();                  % Re‚Äêfetch or finalize the model data
d.resetStatus();               % Clear old recorded status

% If desired, set standard time step:
d.setStandarddT();

%------------------ end initialize model ---------------

%------------------ TRIAXIAL-STYLE TEST ----------------
% This loop increments the vertical (Z) stress while
% X and Y remain at their original confining levels.

totalCircle = 3;  % How many increments to do
d.tic(totalCircle);   % Start timing each increment

% We'll store snapshots in data/step/ with unique filename
fName = ['data/step/' B.name num2str(B.ballR) '-' num2str(B.distriRate) 'loopNum'];

% Save the initial state
save([fName '0.mat']);

% Let the solver automatically pick GPU usage if feasible
gpuStatus = d.mo.setGPU('auto');

for i = 1:totalCircle

    % Increase vertical stress in increments from
    % B.SET.stressZZ*(1 + 1/totalCircle) up to B.SET.stressZZ*(1 + totalCircle/totalCircle)
    B.setPlatenStress(B.SET.stressXX,B.SET.stressYY,B.SET.stressZZ*(1 + i/totalCircle), B.ballR*5);                                % smooth boundary region

    % Quasi-static balance each step
    d.balance('Standard', 1);

    % Clear some stored data to reduce memory usage
    d.clearData(1);

    % Temporarily switch off GPU for saving
    d.mo.setGPU('off');
    save([fName num2str(i) '.mat'], 'd');

    % Recalculate data
    d.calculateData();
    d.mo.setGPU(gpuStatus);

    % Show iteration timing
    d.toc();
end

% Record how long the entire run took
d.recordCalHour('Step3Finish');

% Turn off GPU, finalize saving
d.mo.setGPU('off');
save(['TempModel/' B.name '3.mat'], 'B', 'd');
save(['TempModel/' B.name '3R' num2str(B.ballR) '-distri' ...
      num2str(B.distriRate)  'aNum' num2str(d.aNum) '.mat']);

% Optionally display final stress in post-processing
d.showFilter('Group', {'sample'}, 'StressZZ');

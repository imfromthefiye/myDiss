#include "test.h"

class GranularSoil : public Test
{
public:
    GranularSoil()
    {
        // Use light gravity like in the paper
        m_world->SetGravity(b2Vec2(0.0f, -0.1f));

        // Ground
        {
            b2BodyDef bd;
            bd.position.Set(0.0f, -1.0f);
            b2Body* ground = m_world->CreateBody(&bd);

            b2EdgeShape groundShape;
            groundShape.SetTwoSided(b2Vec2(-20.0f, 0.0f), b2Vec2(20.0f, 0.0f));
            ground->CreateFixture(&groundShape, 0.0f);
        }

        // Wall boundaries
        CreateWall(-10.0f); // Left
        CreateWall(10.0f);  // Right

        // Create granular polygon particles
        const int count = 400;
        for (int i = 0; i < count; ++i)
        {
            b2Vec2 pos(RandomFloat(-9.0f, 9.0f), RandomFloat(1.0f, 20.0f));

            b2BodyDef bd;
            bd.type = b2_dynamicBody;
            bd.position = pos;
            bd.angle = RandomFloat(-b2_pi, b2_pi);
            b2Body* body = m_world->CreateBody(&bd);

            // Create a polygon (e.g. random 5–8 sided shape)
            b2Vec2 verts[8];
            float radius = 0.25f;

            int n = 6 + rand() % 3;  // 6–8 sided
            for (int j = 0; j < n; ++j)
            {
                float angle = j * 2.0f * b2_pi / n;
                verts[j].Set(radius * cosf(angle), radius * sinf(angle));
            }

            b2PolygonShape poly;
            poly.Set(verts, n);

            b2FixtureDef fd;
            fd.shape = &poly;
            fd.density = 5000.0f;   // High density like in paper
            fd.friction = 0.6f;     // μs
            fd.restitution = 0.0f;  // perfectly inelastic
            body->CreateFixture(&fd);
        }
    }

    void CreateWall(float x)
    {
        b2BodyDef bd;
        bd.position.Set(x, 10.0f);
        b2Body* wall = m_world->CreateBody(&bd);

        b2PolygonShape shape;
        shape.SetAsBox(0.2f, 20.0f);
        wall->CreateFixture(&shape, 0.0f);
    }

    static Test* Create()
    {
        return new GranularSoil;
    }
};

static int testIndex = RegisterTest("My Demos", "Granular Soil", GranularSoil::Create);

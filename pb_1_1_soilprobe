"""This is the first soil probe simulation that simulates burrowing - dropping from height"""

import pygame
import random
from Box2D import *

# Constants
SCALE = 10.0
DB = 1.0
RADIUS = DB / 2
SOIL_DENSITY = 5000
SOIL_FRICTION = 0.6
PROBE_DENSITY = 7500
FPS = 60
WIDTH, HEIGHT = 30, 30
GAP_WIDTH = 2.2
WINDOW = int(WIDTH * SCALE)
STAGE = "PREPARATION"

# Conversion
def to_screen(p): return int(p[0] * SCALE), int(WINDOW - p[1] * SCALE)

# Initialization
pygame.init()
screen = pygame.display.set_mode((WINDOW, WINDOW))
clock = pygame.time.Clock()
world = b2World(gravity=(0, -9.8))
particles, pistons, probe = [], {}, None
blocking_plate = None

# Walls
def static_box(x, y, w, h):
    b = world.CreateStaticBody(position=(x, y))
    b.CreatePolygonFixture(box=(w, h), friction=1.0)
    return b

left_wall = static_box(1, HEIGHT/2, 0.5, HEIGHT/2)
right_wall = static_box(WIDTH-1, HEIGHT/2, 0.5, HEIGHT/2)
bottom = static_box(WIDTH/2, 1, WIDTH/2, 0.5)

# Pistons & Blocking Plate
def create_packing_system():
    global pistons, blocking_plate
    p_w = (WIDTH - GAP_WIDTH) / 2
    pistons["left"] = world.CreateKinematicBody(position=(p_w/2, HEIGHT - 2))
    pistons["left"].CreatePolygonFixture(box=(p_w/2, 0.5), friction=1.0)

    pistons["right"] = world.CreateKinematicBody(position=(WIDTH - p_w/2, HEIGHT - 2))
    pistons["right"].CreatePolygonFixture(box=(p_w/2, 0.5), friction=1.0)

    blocking_plate = world.CreateKinematicBody(position=(WIDTH / 2, HEIGHT - 2))
    blocking_plate.CreatePolygonFixture(box=(GAP_WIDTH / 2, 0.5), friction=1.0)

# Spawn Particles
def spawn_soil(n=500):
    for _ in range(n):
        x = random.uniform(2, WIDTH - 2)
        y = random.uniform(HEIGHT / 2, HEIGHT - 3)
        b = world.CreateDynamicBody(position=(x, y))
        b.CreateCircleFixture(radius=RADIUS, density=SOIL_DENSITY, friction=SOIL_FRICTION)
        particles.append(b)

# Spawn Rigid Probe
def insert_probe():
    global probe
    x_pos = WIDTH / 2
    y_pos = HEIGHT + 2  # Spawn just above the container

    # Create probe body
    b = world.CreateDynamicBody(position=(x_pos, y_pos), fixedRotation=True)

    # Rectangle dimensions
    half_width = 2.1 / 2     # 1.05 m
    half_height = 2.5 / 2    # 1.25 m

    # Rectangular shaft
    shape_rect = b2PolygonShape(box=(half_width, half_height))

    # Conical tip (bottom triangle)
    tip_height = 2.1  # same as probe width
    tip_vertices = [(-half_width, -half_height),
                    (half_width, -half_height),
                    (0, -half_height - tip_height)]  # -1.25 - 2.1 = -3.35
    shape_tip = b2PolygonShape(vertices=tip_vertices)

    # Create both fixtures
    fixture_def = dict(density=7500, friction=0.8, restitution=0.1)
    b.CreateFixture(shape=shape_rect, **fixture_def)
    b.CreateFixture(shape=shape_tip, **fixture_def)

    probe = b


# Drawing helpers
def draw_rect(b, w, h, color):
    x, y = to_screen(b.position)
    r = pygame.Rect(x - w*SCALE, y - h*SCALE, 2*w*SCALE, 2*h*SCALE)
    pygame.draw.rect(screen, color, r, 1)

# Main Loop
create_packing_system()
spawn_soil()

while True:
    for e in pygame.event.get():
        if e.type == pygame.QUIT:
            pygame.quit(); exit()

    screen.fill((0, 0, 0))

    # Phase: SETTLING
    if STAGE == "PREPARATION":
        pistons["left"].linearVelocity = (0, -0.9)
        pistons["right"].linearVelocity = (0, -0.9)
        blocking_plate.linearVelocity = (0, -0.9)
        if pistons["left"].position[1] <= HEIGHT / 2 + 5:
            pistons["left"].linearVelocity = (0, 0)
            pistons["right"].linearVelocity = (0, 0)
            blocking_plate.linearVelocity = (0, 0)
            STAGE = "READY_TO_PROBE"

    elif STAGE == "READY_TO_PROBE":
        world.DestroyBody(blocking_plate)
        insert_probe()
        STAGE = "BURROWING"

    elif STAGE == "BURROWING":
        if probe:
            probe.ApplyForceToCenter((0, -1e4), wake=True)

    # Physics Step
    world.Step(1/FPS, 8, 3)

    # Draw Particles
    for p in particles:
        x, y = to_screen(p.position)
        pygame.draw.circle(screen, (200, 200, 200), (x, y), int(RADIUS * SCALE))

    # Draw Walls and Pistons
    draw_rect(left_wall, 0.5, HEIGHT/2, (0, 255, 0))
    draw_rect(right_wall, 0.5, HEIGHT/2, (0, 255, 0))
    draw_rect(bottom, WIDTH/2, 0.5, (0, 255, 0))
    draw_rect(pistons["left"], (WIDTH - GAP_WIDTH)/4, 0.5, (100, 100, 255))
    draw_rect(pistons["right"], (WIDTH - GAP_WIDTH)/4, 0.5, (100, 100, 255))
    if blocking_plate:
        draw_rect(blocking_plate, GAP_WIDTH/2, 0.5, (255, 255, 0))

    # Draw Probe
    if probe:
        for f in probe.fixtures:
            shape = f.shape
            if isinstance(shape, b2PolygonShape):
                verts = [to_screen(probe.transform * v) for v in shape.vertices]
                pygame.draw.polygon(screen, (255, 100, 100), verts, 0)

    pygame.display.flip()
    clock.tick(FPS)
